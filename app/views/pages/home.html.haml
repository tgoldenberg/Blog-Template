.side-image
  .images-wrapper
  .side-image-content
    %h4 Stripe with Rails
    %h1 3-way payments with Stripe
    <p style="margin-bottom: 1em;"> Stripe is considered to have some of the best documentation available for payment gateway systems.
    While that is indeed true, it can still be daunting to implement custom features for your app with Stripe.
    For sure, Stripe has some excellent feature to make styling easy,
    but what if you want to host payments between users? Here I will take you step-by-step through the process.</p>
.panel-light{style: 'background: #F9F9F9;'}
  .content-wrapper{style: 'width: 60%; background: #F9F9F9;'}

    .markdown-wrapper
      :markdown
        Alright, let's get started. The first thing is to install the necessary gems and build the models that we'll need for this example application. The theme to our app will be a puppy adoption center, where our site hosts sellers and takes a percentage of each transaction. The gems we will be using are featured on the right, and include `devise` for authentication, `haml-rails` for our layout, `bourbon` and `neat` for our CSS, `figaro` to store our environment variables, and the `stripe` and `omniauth-stripe-connect` gems for managing our payments through Stripe.

        You will want to run the `bundle install` command to install the gems. Also, you can start the application with the command `rails new my-app-name`.
  .code-wrapper{style: 'width: 39%;'}
    %pre
      %code
        :preserve
          source 'https://rubygems.org'
            gem 'rails', '4.2.1'
            gem 'sqlite3'
            gem 'sass-rails', '~> 5.0'
            gem 'uglifier', '>= 1.3.0'
            gem 'coffee-rails', '~> 4.1.0'

            gem 'jquery-rails'
            gem 'turbolinks'
            gem 'jbuilder', '~> 2.0'
            gem 'sdoc', '~> 0.4.0', group: :doc
            gem 'haml-rails'
            gem 'devise'
            gem 'bourbon'
            gem 'neat'
            gem 'stripe'
            gem 'omniauth-stripe-connect'
            gem 'figaro'

            group :development, :test do
              gem 'byebug'
              gem 'better_errors'
              gem 'web-console', '~> 2.0'
              gem 'spring'
            end

  %div{style: 'clear:both'}

.panel-dark{style: 'background: #F9F9F9;'}
  .code-wrapper{style: 'width: 44%;'}
    %pre
      %code
        :preserve
          rails g controller pages home
          rails g devise:install
          rails g devise User
          rails g scaffold Puppies name:string price:integer breed:string
          age:integer url:string user_id:integer

          rails g AddDetailsToUsers name:string publishable_key:string
          provider:string uid:string access_code:string

          rails g controller charges item:string user_id:integer
          vendor_id:integer token:string customer_id:string completed:boolean
          rake db:migrate

          ## user.rb
          class User < ActiveRecord::Base
            devise :database_authenticatable, :registerable,
           :recoverable, :rememberable, :trackable,
           :validatable, :omniauthable
            has_many :puppies, dependent: :destroy
            has_many :paid_charges, class_name: 'Charge',
            foreign_key: 'user_id', dependent: :destroy

            has_many :received_charges, class_name: 'Charge',
            foreign_key: 'vendor_id', dependent: :destroy
          end

          ## puppy.rb
          class Puppy < ActiveRecord::Base
            belongs_to :user
          end

          ## charge.rb
          class Charge < ActiveRecord::Base
            belongs_to :user
            belongs_to :vendor, class_name: 'User', foreign_key: 'vendor_id'
          end

  .content-wrapper{style: 'width: 53%; margin-right: 15px;'}
    .markdown-wrapper
      :markdown
        Now we can create our models and controllers. On the left, you will see the command-line commands for creating our home page controller as well as our `devise` __User__ model, a scaffold for the __puppies__ resource, and last, our __charges__  model. In our model files, we create the necessary associations, so that we can associate a puppy with a user - `puppy.user` - a charge with a buyer and seller -- `charge.user` and `charge.vendor` -- and likewise, -- `user.received_charges` and `user.paid_charges`. Below you can see what our home page will look like when a customer clicks to buy a puppy.
      %img{src: "/assets/screen2.png", style: 'width: 490px; margin-top: 50px; margin-left: 50px;'}

  %div{style: 'clear:both;'}
.panel-light{style: 'background: #F9F9F9;'}
  .content-wrapper{style: 'width: 42%; margin-left: 3px;'}
    .markdown-wrapper
      :markdown
        Now to get setup with Stripe, you should first create an account at [https://stripe.com/](https://stripe.com). There you'll get a set of keys, both for testing and for when your website is ready to launch. Here we'll be dealing with test mode. Once you have your publishable and secret keys, you'll want to use the __figaro__ gem to encrypt that information so that it isn't passed into your git commits and Github. Check out figaro's documentation [here](https://github.com/laserlemon/figaro).

        Once that is done, since we are using `devise`, we should adjust our `initializers/devise.rb` file, and create a `stripe.rb` file in our __config/initializers__ folder. In out `routes.rb` file, you'll see that we've configured our __devise__ routes to include an `omniauth_callback` controller. We've also included a `charges#complete` controller action to allow us to create delayed payments. This way our buyer's are charged only upon successful completion of the terms of service.
  .code-wrapper{style: 'width: 56%;'}
    %pre
      %code
        = preserve do
          :escaped
            ## routes.rb


            Rails.application.routes.draw do
              resources :puppies
              resources :charges
              devise_for :users, :controllers => { :omniauth_callbacks => "omniauth_callbacks" }
              root 'pages#home'
              get 'pups' => 'pages#pups'
              get 'complete_charge' => 'charges#complete'
            end

            ## initializers/stripe.rb


            Rails.configuration.stripe = {
              :publishable_key => ENV["stripe_publishable_key"],
              :secret_key      => ENV["stripe_api_key"]
            }
            Stripe.api_key = Rails.configuration.stripe[:secret_key]


            ## initializers/devise.rb


            config.omniauth :stripe_connect, ENV["access_token"], ENV["stripe_api_key"],
            scope: 'read_write', stripe_landing: 'register'


            ## home.html.haml


            <div class="puppy-button">
              <%= form_for @charge do |f| %>
                <%= f.hidden_field :amount, value: puppy.price %>
                <%= f.hidden_field :item, value: puppy.name %>
                <%= f.hidden_field :owner_id, value: puppy.user.id %>
                <script src="https://checkout.stripe.com/checkout.js" class="stripe-button"
                data-key=ENV["stripe_publishable_key"] data-amount="<%= puppy.price*100 %>"
                data-name="PuppyAdopt" data-description="<%= number_to_currency(puppy.price) %>"
                data-image: "/assets/lab.jpg"></script>


  %div{style: 'clear:both;'}

.panel-dark{style: 'background: #F9F9F9;'}
  .code-wrapper{style: 'width: 53%;'}
    %pre
      %code
        :preserve
          ## omniauth_callbacks_controller.rb


          class OmniauthCallbacksController < ApplicationController
            def stripe_connect
              @user = current_user
              if @user.update_attributes({
                provider: request.env["omniauth.auth"].provider,
                uid: request.env["omniauth.auth"].uid,
                access_code: request.env["omniauth.auth"].credentials.token,
                publishable_key: request.env["omniauth.auth"].info.stripe_publishable_key
              })
                # anything else you need to do in response..
                sign_in_and_redirect @user, :event => :authentication
                flash[:notice] = "Signed in with " +
                current_user.provider.to_s.titleize + " successfully."
              else
                session["devise.stripe_connect_data"] = request.env["omniauth.auth"]
                redirect_to new_user_registration_url
              end
            end
          end


          ## pages_controller.rb


          class PagesController < ApplicationController
            before_action :authenticate_user!
            def home
              @users = User.all
              @puppies = Puppy.all
              @charge = Charge.new
            end

            def pups
              @user = current_user
              if @user
                @puppies = Puppy.where(user_id: @user.id)
              end
            end
          end


          ## charges_controller.rb


          class ChargesController < ApplicationController
            def new
            end

            def complete
              @charge = Charge.find(params[:charge_id])
              @puppy = Puppy.find_by(user_id: @charge.user_id,
              arrived: false, name: @charge.item)

              Stripe.api_key = ENV["stripe_api_key"]
              token = params[:token]
              charge = Stripe::Charge.create({
                :amount => @charge.price*100,
                :description => 'Rails Stripe customer',
                :customer => params[:customer_id],
                :currency => 'usd',
                :destination => @charge.vendor.uid,
                :application_fee => 200+(@charge.price*3)+ 31
                },
              )
              @charge.update_attribute(:completed, true)
              @puppy.update_attribute(:arrived, true)

              rescue Stripe::CardError => e
                flash[:error] = e.message
                redirect_to charges_path
            end

            def create
              customer = Stripe::Customer.create(
                :email => 'example@stripe.com',
                :card => params[:stripeToken]
              )
              @charge = Charge.new(
              price: params[:charge]["amount"].to_i,
              user_id: current_user.id,
              vendor_id: params[:charge]["owner_id"].to_i,
              item: params[:charge]["item"],
              token: params[:stripeToken],
              customer_id: customer.id
              )
              @charge.save

              @puppy = Puppy.where(name: @charge.item).first
              @puppy.user_id = @charge.user_id
              @puppy.arrived = false
              @puppy.save
            end
          end






  .content-wrapper{style: 'width: 42%; margin-right: 25px;'}
    .markdown-wrapper
      :markdown
        For filling in the credit card information, you will want to look at __Stripe's__ documentation on its [Checkout page](https://stripe.com/checkout). This makes it easy to integrate at first, but as you will see, there are a few 'gotchas'. With __Stripe Checkout__, we can have a website-to-customer interaction, but what if we want to host transactions between 2 users, similar to an Amazon? Or what if we don't want to charge our customer right away, but want to keep their information and charge them after the service delivery? To the left is my attempt to integrate a solution to these issues.

        First you will see the `omniauth_callbacks` controller file. This is to allow our users to register their __Stripe__ accounts in order to be sellers. This is accomplished through the `omniauth_stripe_connect` gem. More information on the __Stripe Connect__ options can be found [here](https://stripe.com/connect). Once your user passes through the authorization, they will become connected accounts on your __Stripe__ dashboard.

        Next we can see that in our __charges__ controller, we have made a few changes. Compare this to the __Stripe__ example [here](https://stripe.com/docs/connect/payments-fees). We have seperated the __Stripe::Customer.create__ and __Stripe::Charge.create__ actions into two seperate controller actions - `create` and `complete`. In the __create__ action, we save our users information in the `charge` model of our database. Once it is time to charge our customer, we call the __complete__ action with parameters for the destination and user __token__. If we look in our __Stripe dashboard__, we will be able to see the transaction transferring money to our seller, and an application fee ( defined in the `charges#complete` action) to us.

        Well, that's about it for creating payments with __Stripe__. I hope you enjoyed this blog post. Please share your comments below. I am by no means an expert, and welcome corrections / improvements. Also, for the full repo, visit my Github site [here](https://github.com/tgoldenberg/stripe-test). Happy coding!
    %img{src: "/assets/screen1.png", style: 'width: 380px; margin-top: 20px; margin-left: 50px;'}
    %img{src: "/assets/screen5.png", style: 'width: 380px; margin-top: 20px; margin-left: 50px;'}

  %div{style: 'clear:both;'}


.panel-dark{id: 'comments', style: 'min-height: 3em;'}
  %h3{style: 'margin-left: 100px; width: 75%; padding-bottom: 15px; font-size: 28px;font-weight: 300; border-bottom: 1px solid #e4e4e4;'} #{@comments.count} comments
  - @comments.each do |comment|
    %p.comment-body #{comment.body}
    %p.comment-author Added by #{comment.author} #{time_ago_in_words(comment.created_at)} ago



.modal{style: 'margin-left: 100px; margin-top: 50px; margin-bottom: 50px;'}
  %label{for: 'modal-1'}
    .modal-trigger Click to Post a Comment
  %input{class: 'modal-state', id: 'modal-1', type: 'checkbox'}

  .modal-fade-screen
    .modal-inner
      .modal-close{for: 'modal-1'}
      %h3 New Comment
      = render 'form'


-# TODO - Give preview of app
-# Basic start with devise and scaffolds
-# Stripe Checkout
-# Stripe OAuth
-# Stripe Charge
-# Application Fee
-# Overview
